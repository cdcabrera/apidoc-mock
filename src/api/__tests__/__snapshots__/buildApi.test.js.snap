// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BuildApi should build a response with specific properties: buildResponse 1`] = `
{
  "appResponses": [
    {
      "callback": [Function],
      "type": "get",
      "url": "/hello/world/",
    },
  ],
  "routesLoaded": true,
}
`;

exports[`BuildApi should build a response with specific properties: buildResponse callback 1`] = `
[
  [
    "Cache-Control",
    "no-cache",
  ],
  [
    200,
  ],
  [
    "Content-Type",
    "text/plain",
  ],
]
`;

exports[`BuildApi should build specific headers: buildRequestHeaders.request.headers 1`] = `
{
  "Access-Control-Allow-Credentials": true,
  "Access-Control-Allow-Methods": "GET, PUT, POST, DELETE, HEAD, OPTIONS, PATCH",
  "Access-Control-Allow-Origin": "*",
}
`;

exports[`BuildApi should build specific headers: buildRequestHeaders.request.preflight 1`] = `
{
  "Access-Control-Allow-Credentials": true,
  "Access-Control-Allow-Headers": "x-test-header",
  "Access-Control-Allow-Methods": "GET, PUT, POST, DELETE, HEAD, OPTIONS, PATCH",
  "Access-Control-Allow-Origin": "*",
  "access-control-request-headers": "x-test-header",
}
`;

exports[`BuildApi should parse custom mock api settings: parseCustomMockSettings 1`] = `
{
  "delay": 2000,
  "forceStatus": 401,
  "reload": true,
  "response": "response",
}
`;

exports[`BuildApi should parse malformed mock api settings and provide fallbacks: parseCustomMockSettings.delayResponse.malformed 1`] = `
{
  "delay": 1000,
  "forceStatus": undefined,
  "reload": undefined,
  "response": undefined,
}
`;

exports[`BuildApi should parse malformed mock api settings and provide fallbacks: parseCustomMockSettings.forceStatus.malformed 1`] = `
{
  "delay": undefined,
  "forceStatus": 200,
  "reload": undefined,
  "response": undefined,
}
`;

exports[`BuildApi should parse random mock api settings: parseCustomMockSettings.randomError 1`] = `
{
  "delay": undefined,
  "forceStatus": undefined,
  "reload": true,
  "response": "error",
}
`;

exports[`BuildApi should parse random mock api settings: parseCustomMockSettings.randomSuccess 1`] = `
{
  "delay": undefined,
  "forceStatus": undefined,
  "reload": true,
  "response": "success",
}
`;

exports[`BuildApi should return a mock mime type and parsed content: parseContentAndType 1`] = `
{
  "content": ""{\\n  \\"foo\\": \\"hello\\",\\n  \\"bar\\": \\"world\\"\\n}"",
  "contentType": "application/json",
}
`;

exports[`BuildApi should return a mock mime type and parsed content: parseContentAndType.fallback 1`] = `
{
  "content": "{
  "foo": "hello",
  "bar": "world"
}",
  "contentType": "text/plain",
}
`;

exports[`BuildApi should return a mock mime type and parsed content: parseContentAndType.passthrough 1`] = `
{
  "content": "{
  "foo": "hello",
  "bar": "world"
}",
  "contentType": "lorem/ipsum",
}
`;

exports[`BuildApi should return a mock mime type and parsed content: parseContentAndType.svg 1`] = `
{
  "content": "<lorem><ipsum dolor="sit" /></lorem>",
  "contentType": "image/svg+xml",
}
`;

exports[`BuildApi should return a mock mime type and parsed content: parseContentAndType.xml 1`] = `
{
  "content": "<lorem><ipsum dolor="sit" /></lorem>",
  "contentType": "text/xml",
}
`;

exports[`BuildApi should return specific properties: specific properties 1`] = `
[
  "buildResponse",
  "buildRequestHeaders",
  "getContentAndType",
  "getCustomMockSettings",
  "getExampleResponse",
]
`;
